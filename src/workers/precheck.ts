import { FlowProducer } from 'bullmq'
import redis from '../config/redis'
import wikidata from '../prompts/wikidata'
import { askPrompt, askStream } from '../lib/openai'
import { zodResponseFormat } from 'openai/helpers/zod'
import { DiscordJob, DiscordWorker } from '../lib/DiscordWorker'
import { JobType } from '../types'
import { z } from 'zod'
import { QUEUE_NAMES } from '../queues'

class PrecheckJob extends DiscordJob {
  declare data: DiscordJob['data'] & {
    cachedMarkdown?: string
    companyName?: string
    type: JobType
  }
}

const flow = new FlowProducer({ connection: redis })

const companyNameSchema = z.object({
  companyName: z.string().nullable(),
})

const precheck = new DiscordWorker(
  QUEUE_NAMES.PRECHECK, 
  async (job: PrecheckJob) => {
    const { cachedMarkdown, type, ...baseData } = job.data
    const { markdown = cachedMarkdown } = await job.getChildrenEntries()
  
    async function extractCompanyName(
      markdown: string,
      retry = 3,
      start = 0,
      chunkSize = 5000
    ): Promise<string | null> {
      if (retry <= 0 || start >= markdown.length) return null
      const chunk = markdown.substring(start, start + chunkSize)
      const response = await askStream(
        [
          {
            role: 'user',
            content: `What is the name of the company? Respond only with the company name, leave null if you cannot find it. We will search Wikidata for this name. The following is an extract from a PDF:
            
            ${chunk}
            `,
          },
        ],
        {
          response_format: zodResponseFormat(
            companyNameSchema,
            `companyName-${retry}`
          ),
        }
      ).then(JSON.parse)
  
      const { companyName: rawName } = companyNameSchema.parse(response)
      const companyName = rawName ? rawName.trim() : null
  
      return (
        companyName ||
        extractCompanyName(markdown, retry - 1, start + chunkSize, chunkSize)
      )
    }
  
    const companyName = await extractCompanyName(markdown)
  
    if (!companyName) throw new Error('Could not find company name')
  
    job.log('Company name: ' + companyName)
    await job.setThreadName(companyName)
  
    const description = await askPrompt(
      `Du √§r en torr revisor som ska skriva en kort, objektiv beskrivning av f√∂retagets verksamhet.
  
  ** Beskrivning **
  F√∂lj dessa riktlinjer:
  
  1. L√§ngd: Beskrivningen f√•r inte √∂verstiga 300 tecken, inklusive mellanslag.
  2. Syfte: Endast f√∂retagets verksamhet ska beskrivas. Anv√§nd ett extra sakligt och neutralt spr√•k.
  3. F√∂rbjudet inneh√•ll (marknadsf√∂ring): VIKTIGT! Undvik ord som "ledande", "i framkant", "marknadsledare", "innovativt", "v√§rdefull", "framg√•ngsrik" eller liknande. Texten f√•r INTE inneh√•lla formuleringar som uppfattas som marknadsf√∂ring eller s√§ljande spr√•k.
  4. F√∂rbjudet inneh√•ll (h√•llbarhet): VIKTIGT! Undvik ord som "h√•llbarhet", "klimat" eller liknande. Texten f√•r INTE inneh√•lla bed√∂mningar av f√∂retagets h√•llbarhetsarbete.
  5. Spr√•k: VIKTIGT! Beskrivningen ska ENDAST vara p√• svenska. Om originaltexten √§r p√• engelska, √∂vers√§tt till svenska.
  
  F√∂r att s√§kerst√§lla att svaret f√∂ljer riktlinjerna, t√§nk p√• att:
  
  - Anv√§nd ett sakligt och neutralt spr√•k.
  - Aldrig anv√§nda marknadsf√∂rande eller v√§rderande spr√•k.
  - Tydligt beskriva f√∂retagets verksamhet.
  
  Svara endast med f√∂retagets beskrivning. L√§gg inte till andra instruktioner eller kommentarer.
  
  Exempel p√• svar: "AAK √§r ett f√∂retag som specialiserar sig p√• v√§xtbaserade oljel√∂sningar. F√∂retaget erbjuder ett brett utbud av produkter och tj√§nster inom livsmedelsindustrin, inklusive specialfetter f√∂r choklad och konfektyr, mejeriprodukter, bageri och andra livsmedelsapplikationer."
  
  F√∂ljande √§r ett utdrag ur en PDF:`,
      markdown.substring(0, 5000)
    )
  
    const base = {
      data: { ...baseData, companyName, description },
      opts: {
        attempts: 3,
      },
    }
  
    job.log('Company description:\n' + description)
  
    job.sendMessage('ü§ñ St√§ller fr√•gor om basfakta...')
  
    try {
      const extractEmissions = await flow.add({
        name: 'precheck done ' + companyName,
        queueName: QUEUE_NAMES.EXTRACT_EMISSIONS,
        data: { ...base.data },
        children: [
          {
            ...base,
            name: 'guessWikidata ' + companyName,
            queueName: QUEUE_NAMES.GUESS_WIKIDATA,
            data: {
              ...base.data,
              schema: zodResponseFormat(wikidata.schema, type),
            },
          },
          {
            ...base,
            queueName: QUEUE_NAMES.FOLLOW_UP,
            name: 'fiscalYear ' + companyName,
            data: {
              ...base.data,
              type: JobType.FiscalYear,
            },
          },
        ],
        opts: {
          attempts: 3,
        },
      })
      return extractEmissions.job?.id
    } catch (error) {
      job.log('Error: ' + error)
      job.editMessage('‚ùå Error: ' + error)
      throw error
    }
  }
)

export default precheck
